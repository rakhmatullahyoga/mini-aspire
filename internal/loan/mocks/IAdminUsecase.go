// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	loan "github.com/rakhmatullahyoga/mini-aspire/internal/loan"
	mock "github.com/stretchr/testify/mock"
)

// IAdminUsecase is an autogenerated mock type for the IAdminUsecase type
type IAdminUsecase struct {
	mock.Mock
}

// ApproveLoan provides a mock function with given fields: loanID
func (_m *IAdminUsecase) ApproveLoan(loanID string) (*loan.Loan, error) {
	ret := _m.Called(loanID)

	var r0 *loan.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*loan.Loan, error)); ok {
		return rf(loanID)
	}
	if rf, ok := ret.Get(0).(func(string) *loan.Loan); ok {
		r0 = rf(loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loan.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoans provides a mock function with given fields: page
func (_m *IAdminUsecase) ListLoans(page int) ([]loan.Loan, error) {
	ret := _m.Called(page)

	var r0 []loan.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]loan.Loan, error)); ok {
		return rf(page)
	}
	if rf, ok := ret.Get(0).(func(int) []loan.Loan); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]loan.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIAdminUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAdminUsecase creates a new instance of IAdminUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAdminUsecase(t mockConstructorTestingTNewIAdminUsecase) *IAdminUsecase {
	mock := &IAdminUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
