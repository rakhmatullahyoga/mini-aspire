// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	loan "github.com/rakhmatullahyoga/mini-aspire/internal/loan"
	mock "github.com/stretchr/testify/mock"
)

// ILoanRepository is an autogenerated mock type for the ILoanRepository type
type ILoanRepository struct {
	mock.Mock
}

// GetLoanByID provides a mock function with given fields: loanID
func (_m *ILoanRepository) GetLoanByID(loanID string) (*loan.Loan, error) {
	ret := _m.Called(loanID)

	var r0 *loan.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*loan.Loan, error)); ok {
		return rf(loanID)
	}
	if rf, ok := ret.Get(0).(func(string) *loan.Loan); ok {
		r0 = rf(loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loan.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoans provides a mock function with given fields: offset, count
func (_m *ILoanRepository) ListLoans(offset int, count int) ([]loan.Loan, error) {
	ret := _m.Called(offset, count)

	var r0 []loan.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]loan.Loan, error)); ok {
		return rf(offset, count)
	}
	if rf, ok := ret.Get(0).(func(int, int) []loan.Loan); ok {
		r0 = rf(offset, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]loan.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserLoans provides a mock function with given fields: userID, offset, count
func (_m *ILoanRepository) ListUserLoans(userID string, offset int, count int) ([]loan.Loan, error) {
	ret := _m.Called(userID, offset, count)

	var r0 []loan.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]loan.Loan, error)); ok {
		return rf(userID, offset, count)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []loan.Loan); ok {
		r0 = rf(userID, offset, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]loan.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(userID, offset, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLoanStatus provides a mock function with given fields: loanID, status
func (_m *ILoanRepository) SetLoanStatus(loanID string, status loan.LoanStatus) (*loan.Loan, error) {
	ret := _m.Called(loanID, status)

	var r0 *loan.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, loan.LoanStatus) (*loan.Loan, error)); ok {
		return rf(loanID, status)
	}
	if rf, ok := ret.Get(0).(func(string, loan.LoanStatus) *loan.Loan); ok {
		r0 = rf(loanID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loan.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(string, loan.LoanStatus) error); ok {
		r1 = rf(loanID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreLoan provides a mock function with given fields: _a0
func (_m *ILoanRepository) StoreLoan(_a0 *loan.Loan) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*loan.Loan) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewILoanRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewILoanRepository creates a new instance of ILoanRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewILoanRepository(t mockConstructorTestingTNewILoanRepository) *ILoanRepository {
	mock := &ILoanRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
