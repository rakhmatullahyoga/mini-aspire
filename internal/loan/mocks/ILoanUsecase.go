// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	context "context"

	loan "github.com/rakhmatullahyoga/mini-aspire/internal/loan"
	mock "github.com/stretchr/testify/mock"
)

// ILoanUsecase is an autogenerated mock type for the ILoanUsecase type
type ILoanUsecase struct {
	mock.Mock
}

// ListUserLoans provides a mock function with given fields: ctx, page
func (_m *ILoanUsecase) ListUserLoans(ctx context.Context, page int) ([]loan.Loan, error) {
	ret := _m.Called(ctx, page)

	var r0 []loan.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]loan.Loan, error)); ok {
		return rf(ctx, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []loan.Loan); ok {
		r0 = rf(ctx, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]loan.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserRepayments provides a mock function with given fields: ctx, loanID, page
func (_m *ILoanUsecase) ListUserRepayments(ctx context.Context, loanID string, page int) ([]loan.Repayment, error) {
	ret := _m.Called(ctx, loanID, page)

	var r0 []loan.Repayment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]loan.Repayment, error)); ok {
		return rf(ctx, loanID, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []loan.Repayment); ok {
		r0 = rf(ctx, loanID, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]loan.Repayment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, loanID, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitLoan provides a mock function with given fields: ctx, req
func (_m *ILoanUsecase) SubmitLoan(ctx context.Context, req loan.LoanRequest) (*loan.Loan, error) {
	ret := _m.Called(ctx, req)

	var r0 *loan.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loan.LoanRequest) (*loan.Loan, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loan.LoanRequest) *loan.Loan); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loan.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, loan.LoanRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGetLoan provides a mock function with given fields: ctx, loanID
func (_m *ILoanUsecase) UserGetLoan(ctx context.Context, loanID string) (*loan.Loan, error) {
	ret := _m.Called(ctx, loanID)

	var r0 *loan.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*loan.Loan, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *loan.Loan); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loan.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserSubmitRepayment provides a mock function with given fields: ctx, loanID, amount
func (_m *ILoanUsecase) UserSubmitRepayment(ctx context.Context, loanID string, amount float64) (*loan.Repayment, error) {
	ret := _m.Called(ctx, loanID, amount)

	var r0 *loan.Repayment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) (*loan.Repayment, error)); ok {
		return rf(ctx, loanID, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *loan.Repayment); ok {
		r0 = rf(ctx, loanID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loan.Repayment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, float64) error); ok {
		r1 = rf(ctx, loanID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewILoanUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewILoanUsecase creates a new instance of ILoanUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewILoanUsecase(t mockConstructorTestingTNewILoanUsecase) *ILoanUsecase {
	mock := &ILoanUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
