// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	loan "github.com/rakhmatullahyoga/mini-aspire/internal/loan"
	mock "github.com/stretchr/testify/mock"
)

// IRepaymentRepository is an autogenerated mock type for the IRepaymentRepository type
type IRepaymentRepository struct {
	mock.Mock
}

// BulkStoreRepayment provides a mock function with given fields: repayments
func (_m *IRepaymentRepository) BulkStoreRepayment(repayments []loan.Repayment) error {
	ret := _m.Called(repayments)

	var r0 error
	if rf, ok := ret.Get(0).(func([]loan.Repayment) error); ok {
		r0 = rf(repayments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFirstPendingRepayment provides a mock function with given fields: loanID
func (_m *IRepaymentRepository) GetFirstPendingRepayment(loanID string) (*loan.Repayment, error) {
	ret := _m.Called(loanID)

	var r0 *loan.Repayment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*loan.Repayment, error)); ok {
		return rf(loanID)
	}
	if rf, ok := ret.Get(0).(func(string) *loan.Repayment); ok {
		r0 = rf(loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loan.Repayment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoanRepayments provides a mock function with given fields: loanID, offset, count
func (_m *IRepaymentRepository) ListLoanRepayments(loanID string, offset int, count int) ([]loan.Repayment, error) {
	ret := _m.Called(loanID, offset, count)

	var r0 []loan.Repayment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]loan.Repayment, error)); ok {
		return rf(loanID, offset, count)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []loan.Repayment); ok {
		r0 = rf(loanID, offset, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]loan.Repayment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(loanID, offset, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRepayment provides a mock function with given fields: repayment
func (_m *IRepaymentRepository) UpdateRepayment(repayment loan.Repayment) error {
	ret := _m.Called(repayment)

	var r0 error
	if rf, ok := ret.Get(0).(func(loan.Repayment) error); ok {
		r0 = rf(repayment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIRepaymentRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepaymentRepository creates a new instance of IRepaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepaymentRepository(t mockConstructorTestingTNewIRepaymentRepository) *IRepaymentRepository {
	mock := &IRepaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
