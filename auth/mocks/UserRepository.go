// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	auth "github.com/rakhmatullahyoga/mini-aspire/auth"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// FindByUsername provides a mock function with given fields: username
func (_m *UserRepository) FindByUsername(username string) *auth.User {
	ret := _m.Called(username)

	var r0 *auth.User
	if rf, ok := ret.Get(0).(func(string) *auth.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.User)
		}
	}

	return r0
}

// StoreUser provides a mock function with given fields: user
func (_m *UserRepository) StoreUser(user auth.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
